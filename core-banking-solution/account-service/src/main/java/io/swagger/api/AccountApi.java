/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.4).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Account;
import io.swagger.model.Customer;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-04-22T13:21:02.260Z")

@Api(value = "account", description = "the account API")
public interface AccountApi {

    @ApiOperation(value = "Add a new account to the bank", nickname = "addAccount", notes = "", tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful operation"),
        @ApiResponse(code = 400, message = "Invalid input") })
    @RequestMapping(value = "/account",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Account> addAccount(@ApiParam(value = "Account object that needs to be added to the bank" ,required=true )  @Valid @RequestBody Account body);


    @ApiOperation(value = "Delete account by Id", nickname = "deleteAccount", notes = "This will permanently delete the account.", tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 404, message = "Account id not found") })
    @RequestMapping(value = "/account/{accountId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAccount(@ApiParam(value = "The account id that needs to be deleted",required=true) @PathVariable("accountId") Integer accountId);


    @ApiOperation(value = "Get all accounts", nickname = "findAccounts", notes = "Returns all accounts from the system", response = Account.class, responseContainer = "List", tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A list of accounts", response = Account.class, responseContainer = "List") })
    @RequestMapping(value = "/account",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Account>> findAccounts(@ApiParam(value = "Tags used to filter the result") @Valid @RequestParam(value = "tags", required = false) List<String> tags,@ApiParam(value = "maximum number of results to return") @Valid @RequestParam(value = "limit", required = false) Integer limit);


    @ApiOperation(value = "Finds customer by id's", nickname = "findAccountsByCustomerIds", notes = "Multiple id's values can be provided with comma separated strings", response = Customer.class, responseContainer = "List", tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Customer.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid id's value") })
    @RequestMapping(value = "/account/findByCustomerId",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Customer>> findAccountsByCustomerIds(@ApiParam(value = "Id's values that need to be considered for filter") @Valid @RequestParam(value = "customerIds", required = false) List<String> customerIds);


    @ApiOperation(value = "Find account by Id", nickname = "getAccountById", notes = "Returns a single customer", response = Account.class, tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Account.class),
        @ApiResponse(code = 404, message = "Account id not found") })
    @RequestMapping(value = "/account/{accountId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Account> getAccountById(@ApiParam(value = "ID of account to return",required=true) @PathVariable("accountId") Long accountId);


    @ApiOperation(value = "Updated account by Id", nickname = "updateAccount", notes = "", tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 404, message = "Account id not found") })
    @RequestMapping(value = "/account/{accountId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateAccount(@ApiParam(value = "account id that need to be updated",required=true) @PathVariable("accountId") Integer accountId,@ApiParam(value = "Updated account object" ,required=true )  @Valid @RequestBody Account body);

}
